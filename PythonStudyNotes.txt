关于学习：
1.找到合适的学习材料
2.先见森林，后见树木
3.设立目标，输出

科普网站：
    百科精制
    Crash Course 在国内有专门的中文字幕组 

----------------------------------------------------------------------------------------------------------------------------------
python基础:
1.安装调试：
    找到相应的官网，把东西下载下来，记得添加环境变量
2.python基础
数据类型：
    数据类型：
        不同的数据，需要定义不同的数据类型
        浮点、整数、字符串、
   布尔值：
        布尔值只有两种，要么True，要么Flase
        布尔运算涵盖and、or、not
   空值None:
        None不等于0，是一个特殊的空值
    变量：
        变量本质是键值对，用某个名字、指向某个值
        变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言，静态语言在定义变量时必须指定变量类型。
        数组，字典，元组也是同理，用某个名字，指向某一部分值
    字典、数组、元组、set：
        常用的 string、set、list、tuple、dict 都属于容器对象。
        容器对象是储存多个键值的实体，容器就是一种把多个元素组织在一起的数据结构
        字典就是  字典名+键名+值
        数组就是  数组名+下标+值
        元组就是不可更改的数组
        set可以去重
    字符串和编码：
        计算机只能处理电，通断电抽象出、布尔运算、二进制
        布尔运算、二进制抽象出数字，就可以表现数字计算
        计算机想要处理字符，就要进行再一层抽象，
        通过数字给每一个字符编一个号，就叫做编码，
        这一整个数字与字符间，一个一个对应关系的表，就叫编码表
       （底层的转换暂时盲区）
        这地方很有意思，数学运算也好，指代也好，都是某种概念的具体表现，意识像是概念的大集合
    条件判断：
        值之间进行对比，根据结果执行指令，
        逻辑完备性：
            这个世界中的万事万物都可以用三种顺序来表示出来：顺序、选择和循环
            完备的意思就是说某个理论系统可以涵盖所有的情况，没有例外。
----------------------------------------------------------------------------------------------------------------------------------
3.函数：
        函数就像黑箱子，把A   丢进函数x   得出B
        递归函数：
                1.理论上所有的递归函数都可以写成循环，
                2.递归函数都需要一个出口用于返回。
                如果一个函数在内部调用自己本身，这个函数就是递归函数。
                实例：
                       def fact(n):
                           if n==1:
                               return 1
                           return n * fact(n - 1)
                                           -----------
                                                
                                            这是一个未知数，调用自身，展开，直到确定。
         
                       ===> fact(5)
                       ===> 5 * fact(4)
                       ===> 5 * (4 * fact(3))
                       ===> 5 * (4 * (3 * fact(2)))
                       ===> 5 * (4 * (3 * (2 * fact(1))))
                       ===> 5 * (4 * (3 * (2 * 1)))
                       ===> 5 * (4 * (3 * 2))
                       ===> 5 * (4 * 6)
                       ===> 5 * 24
                       ===> 120

        尾递归：
                  尾递归就是返回值调用自己本身，但不包含表达式，
                  fact_iter(num,product):
                      if num ==1:
                          returm product
                      return fact_iter(num-1,num*product)
           
                   ===>fact_iter(5,1)
                   ===>fact_iter(4,5)
                   ===>fact_iter(3,20)
                   ===> fact_iter(2,60)  ----看这一步就可以，把递归函数想象成蹦蹦床，
                                                          把A  丢进递归函数x  抛出B，B又反弹回函数x 抛出C，上下一直循环，可以设置蹦蹦床的寿命，比如弹跳i次，i次后跌破蹦蹦床，抛出最后值停止循环。
                   ===>fact_iter(1,120)
----------------------------------------------------------------------------------------------------------------------------------
4.高级特性：
        切片：
               就是根据索引取值
        迭代：
               迭代就是遍历
        列表生成式：
                写一个表达式生成一个列表
        生成器：
                生成器就是定义一个算法
                用特定的表达式、算法 
                制作出一个东西
                这个东西可以在需要的时候创建、取值
                不用时就没东西，没东西就不占用内存
                普通函数用return返回一个值,还有一种函数用yield返回值，这种函数叫生成器函数。
        迭代器：
                迭代器就是一种容器，可被next()函数调用
                凡是可作用于for循环的对象都是Iterable类型，可迭代对象。
                凡是可作用于next()函数的对象都是Iterator类型，迭代器。
                常用容器可以通过iter()函数获得一个Iterator对象。
----------------------------------------------------------------------------------------------------------------------------------
5.函数式编程:
    函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数
    函数、类，都是定义模板。
    （这个地方后补)
        高阶函数：
                      1.函数是一个黑箱子，
                      2.黑箱子可以接收参数
                        >>>abs(-10)
                               10
                      3.函数可以接收函数，当函数接收了一个函数时，称为高阶函数。
                         def add(x,y,f):
                             return f(x) + f(y)
                         >>>add(-1,1,abs)
                                2
            map/reduce:
                map接收两个参数，一个是函数，一个是Iterable,    map将函数作用到每个元素身上，并将结果作为新的Iterabel返回
                reduce也接收两个参数，将函数作用在序列上，并把结果继续和序列的下个元素做累计计算
            filter:
                和map相似，一种筛选高阶函数
            sorted：
                排序算法

       返回函数：
                     函数内嵌套一个函数，外函数可以返回内函数，
                     返回内函数时，相关参数和变量都保存在内函数中，称为闭包。
       匿名函数：
                     略。
       装饰器：
                  动态的在原基础上增强功能称为装饰器。decorator
                  装饰器就是写一个函数A，这个函数A可以接收函数B，这样就可以给函数B增添新功能。
                 1.#函数B
                     def now():
                         print('2023.5.3')
                 2.#创建函数A，装饰器。
                      def log(func):
                          def wrapper(*args,**kw):
                              print('call %s():' % func.__name__)
                          return func(*args,**kw)
                      return wrapper       
                 3.#装饰器接收函数B,并赋值给变量（变量名填函数B名)
                    now = log(now)         
                    此时now返回的是wrapper地址,并未执行
                 4.#执行函数now()
                   call now():
                   2023.5.3
                   如果执行函数时往里面填入参数，
                   例now(1,2)等值于wrapper(1,2),
                   wrapper(1,2)等值于now(1,2)
                   
           总结：可以看到不管怎么变，最后执行的都是函数B，
                     不过添加了一层壳后，就在执行函数B之前，先额外执行其他的事情
                     写@log 等价于写now = log(now),
                     语法糖就是一种便捷写法，类似汉语成语，几个字代表了一串字，等价运行。
       偏函数：
                  略
----------------------------------------------------------------------------------------------------------------------------------
6.模块：
          一个.py文件就是一个模块。
          一个目录就是一个包。
          语法、容器、函数、类、模块、包、解释、编译、都是不断抽象并封装的方式
          https://zhuanlan.zhihu.com/p/402924801
      使用模块：
                    导入
      安装第三方模块：
                              一般来说，第三方库都会在Python官方的pypi.python.org网站注册
----------------------------------------------------------------------------------------------------------------------------------
7.面向对象编程：
                      面向对象是一种设计思想
                      数据封装、继承和多态是面向对象的三大特点
          类和实例：
                        类就是模板，实例就是通过模板赋值出来的东西
          访问限制：
                        略
          继承和多态：
                       继承顾名思义，子类继承父类
                       多态，子类继承完父类后进行自己的DIY，没有任何问题。
          获取对象信息：
                       略
          实例属性和类属性：
                       略
----------------------------------------------------------------------------------------------------------------------------------
8.面向对象高级编程：
          使用__slots__:
                              可以限制类或实例动态增加新内容
          使用@property:
                              
                              以下均略
----------------------------------------------------------------------------------------------------------------------------------
9.错误、调试和测试
           均略
----------------------------------------------------------------------------------------------------------------------------------
10.IO编程：
          文件读写：
                        略
          StringIO和BytesIO:
                        在内存中操作str和bytes的方法
          操作文件和目录：
                        调用模块
          序列化：
                        把数据从变量中编程可存储或传输的过程称之为序列化
----------------------------------------------------------------------------------------------------------------------------------
11.进程和线程：
          一个程序就是一个进程，每个进程至少要干一件事，一个进程至少有一个线程。
